# vim: et sw=2 ts=2 lisp autoindent nowrap fo= :

=pod

=head1 NAME

Threading Queue - splitting work across several threads


=head1 SYNOPSIS

  (threading-feed
    (:initial-contents '(1 2 3 4 5))
      (:parallel 3
         (sleep 1)
         *)
      (format t "output single-threaded: ~a~%" *)
      (:parallel 2
         (format t "output multi-threaded: ~a~%" *)))


=head1 DESCRIPTION

This Common Lisp library provides an easy way to split work over several workers.

Elements are returned with a second value of C<T>, so a C<NIL> will come out as C<(values NIL T)>.
As soon as a queue is empty it returns C<(values NIL NIL)>, and won't call your code anymore.
This is similar to the C<gethash> function.

There are several options that can be set globally and per-step.
Using per-step options in the global sections makes them defaults for the individual steps.


=head2 Global options

=over

=item :initial-contents NIL; evaluated

This expression is evaluated once, and specifies the elements that get fed into the first step.

If this is not specified, the first step will be called until it returns C<NIL>; a verbatim C<NIL> element can be inserted into the queue by returning a non-C<NIL> second value.

=item :initial-queue NIL

This is used to use an existing TQ as input to the first step.

=item :max-concurrent-threads 512; evaluated

=for comment (floor MOST-POSITIVE-FIXNUM 3)

The maximum number of simultaneously running threads.

=item :want-result T

If this is C<T> (the default), the return values of the last step are accumulated and returned.

For C<NIL> only a single C<NIL> is returned; this is useful if the side-effects of the process are important.

Any expression can be used here; eg. C<(progn (+ 2 2))> is valid, and makes the first value returned from C<threading-queue> be C<4>.

=item :named NIL

Specifies the name of the C<BLOCK> that is put around the generated code.

=item :init-code NIL

This names code to be placed before starting the queueing operations.

May use C<RETURN-FROM> (or C<RETURN>, if C<:named> is C<NIL>).

=item :before-stopping NIL

Code given here is put in the main thread, just before waiting for the threads to terminate.

This is a good place to cleanup queues defined with C<:queue-named>, assuming that the C<:max-concurrent-threads> limit allows execution to get there.


=back


=head2 Per-step options

Most of these can be given in the global section, and are then used as default for each step.

=over

=item :parallel NIL aka :threads; evaluated

How many threads should be allocated for this step?

This is an upper limit; if there's no input left, no additional threads will be started.

=item :arg-name *DEFAULT-ARG-NAME*

This symbol gets used as argument for the generated functions; the default is C<*>, see the example above.

=item :batch-size NIL; evaluated

If you want to handle multiple elements at once, you can give this option a positive fixnum.

Ie. if C<:batch-size 3> the step will get a list with up to 3 elements each time it is called; and the return value B<must> be a list, although it can consist of more or fewer elements.
Using C<:batch-size 1> will give you (and expect) lists, too!

Only with C<NIL> you get and return singular elements.

=item :at-end T

This specifies the code that gets run at the end of each thread; the returned values are accumulated into the second value of C<THREADING-FEED>.

=item :queue-named NIL

Normally the queue variable names are generated via C<GENSYM>; with this option the queue that passed data further down can be given a name.
This is useful if you want to back-inject values (to get a kind of loop), or to return a queue, to pass it to other functions.

If this is used in the global options, the C<:initial-contents>-queue gets a name.

Please note that you need to care about the input-reference-counting yourself; one input reference is kept for named queues, and you must clean that up via C<tq-input-vanished>. See C<:before-stopping>.

=item :call-with-fns NIL

This option takes a C<lambda> that gets called with three parameters: a closure to read from the input queue (with an optional count parameter, see :batch-size above), a closure that puts all its parameters onto the output queue, and a closure that puts the list it gets as first parameter onto the output queue.

If this is used, no other statements might be given.

  (threading-feed ()
    ...
    (:call-with-fns
      (lambda (qget qput-rest qput-list)
        (declare (ignore qput-list))
        (iter (for (values items valid) = (funcall qget 3))
              (while valid)
              (funcall qput-rest (apply #'+ items)))))))

The example takes up to 3 numbers from the input queue, and passes their sum to the output queue.
Please note the check for end-of-queue (via the C<valid> variable).

The C<:parallel> option is still available, and the end-on-output-queue signalling is automatically done.

=item :filter NIL

This option takes an expression, and discards all elements for which it returns NIL.

  (threading-feed (:initial-contents '(1 2 3 4 5 6))
                  (:filter (oddp *)))

will return C<1 3 5>.

C<:parallel> and C<:arg-name> can be used, too.

=back


=head1 EXAMPLES AND SPECIAL CASES

=head2 QUOTING

This example illustrates which parameters are evaluated and which are not.

I'm aware that C<(incf)> and C<(decf)> are not atomic, that the special variable C<*thread-count*> might be per-thread, etc.

  (threading-feed
    (:parallel ((cpu-count)
                (floor (cpu-count) 2))
     :batch-size (if (filtering?) 1 NIL) 
     :at-start (incf *thread-count*)
     :at-end (decf *thread-count*))
    ...)


=head2 READ function family

The C<READ>-function family has the other style of signaling the end of data; their second value is C<T> to signal end-of-data.
If a step consists only of a single expression, and its first symbol is included in C<threading-queue:*reverse-2nd-value*>, a bit of code to reverse the meaning is put around the statement.

So a typical case might look like this:

  (with-open-file (stream "/etc/hosts")
    (threading-feed
      ()
      (read-line stream nil nil)
      (:parallel 3
         (cons * (expensive-operation *)))
      (format t
              "Result: ~a => ~a~%"
              (car *)
              (cdr *))))


=head1 COMPATIBILITY

Because TSQ uses C<sb-concurrency:mailbox> (and some other SBCL specifica) internally, it is currently limited to SBCL.

Patches are welcome.


=head1 AUTHOR

TSQ was written by Philipp Marek, C<philipp BAT marek POT priv LOT at>. Please excuse the obfuscation.

=head1 LICENSE

TSQ is released under the LLGPL, see L<http://www.cliki.net/LGPL>.

=cut
